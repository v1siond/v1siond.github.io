{"version":3,"sources":["webpack:///./src/graphql/Mutations.ts","webpack:///./node_modules/@vue/babel-helper-vue-jsx-merge-props/dist/helper.js","webpack:///./src/templates/pages/newThread.tsx","webpack:///./src/pages/NewThread.tsx","webpack:///./src/templates/components/editorTabPanel.tsx"],"names":["Mutations","graphql_tag__WEBPACK_IMPORTED_MODULE_3___default","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_extends","Object","assign","a","b","c","arguments","length","d","prototype","hasOwnProperty","call","apply","this","normalMerge","toArrayMerge","functionalMerge","mergeJsxProps","reduce","indexOf","Array","e","concat","f","g","h","i","mergeFn","module","exports","newThread","functional","render","_ref","props","children","data","getLogin","class","editorTabPanel","attrs","preview","showPreview","methods","showEditor","NewThread_Mutations","NewThread_NewThread","_Vue","NewThread","_this","classCallCheck","title","postBody","inherits","createClass","key","value","_this2","$apollo","mutate","variables","id","body","mutation","createThread","then","result","threadSuccess","catch","error","graphQLErrors","threadError","alert","$router","push","_this3","getAdmin","setTitle","setBack","setTimeout","_this4","objectSpread","$props","$data","typographer","helper_default","on","input","$event","target","composing","placeholder","type","domProps","directives","name","modifiers","resize","click","vue_property_decorator","tslib_es6","lib","components","VueMarkdown","vue_markdown_common_default","__webpack_exports__"],"mappings":"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","file":"js/chunk-6c74c888.8e070a82.js","sourcesContent":["import gql from 'graphql-tag';\r\nexport default class Mutations {\r\n    // Users\r\n    authenticate() {\r\n        return gql `\r\n      mutation authenticate($email: String!, $password: String!) {\r\n        authenticate(email: $email, password: $password)\r\n      }\r\n    `;\r\n    }\r\n    createUser() {\r\n        return gql `\r\n      mutation createUser($name: String!, $username: String!, $email: String!, $password: String!) {\r\n        createUser(\r\n          name: $name,\r\n          username: $username,\r\n          email: $email,\r\n          password: $password\r\n        ) {\r\n          id\r\n          username\r\n          email\r\n        }\r\n      }\r\n    `;\r\n    }\r\n    // Categories\r\n    createCategory() {\r\n        return gql `\r\n      mutation createCategory($title: String!) {\r\n        createCategory(title: $title) {\r\n          id\r\n          title\r\n        }\r\n      }\r\n    `;\r\n    }\r\n    // Threads\r\n    createThread() {\r\n        return gql `\r\n      mutation createThread($title: String!, $id: ID!, $body: String!) {\r\n        createThread(title: $title, categoryId: $id, body: $body) {\r\n          id\r\n          title\r\n        }\r\n      }\r\n    `;\r\n    }\r\n    // Posts\r\n    createPost() {\r\n        return gql `\r\n      mutation ccreatePost($body: String!, $id: ID!) {\r\n        createPost(body: $body, threadId: $id) {\r\n          id\r\n        }\r\n      }\r\n    `;\r\n    }\r\n}\r\n","\"use strict\";function _extends(){return _extends=Object.assign||function(a){for(var b,c=1;c<arguments.length;c++)for(var d in b=arguments[c],b)Object.prototype.hasOwnProperty.call(b,d)&&(a[d]=b[d]);return a},_extends.apply(this,arguments)}var normalMerge=[\"attrs\",\"props\",\"domProps\"],toArrayMerge=[\"class\",\"style\",\"directives\"],functionalMerge=[\"on\",\"nativeOn\"],mergeJsxProps=function(a){return a.reduce(function(c,a){for(var b in a)if(!c[b])c[b]=a[b];else if(-1!==normalMerge.indexOf(b))c[b]=_extends({},c[b],a[b]);else if(-1!==toArrayMerge.indexOf(b)){var d=c[b]instanceof Array?c[b]:[c[b]],e=a[b]instanceof Array?a[b]:[a[b]];c[b]=d.concat(e)}else if(-1!==functionalMerge.indexOf(b)){for(var f in a[b])if(c[b][f]){var g=c[b][f]instanceof Array?c[b][f]:[c[b][f]],h=a[b][f]instanceof Array?a[b][f]:[a[b][f]];c[b][f]=g.concat(h)}else c[b][f]=a[b][f];}else if(\"hook\"==b)for(var i in a[b])c[b][i]=c[b][i]?mergeFn(c[b][i],a[b][i]):a[b][i];else c[b]=a[b];return c},{})},mergeFn=function(a,b){return function(){a&&a.apply(this,arguments),b&&b.apply(this,arguments)}};module.exports=mergeJsxProps;\n","import TabPanel from '../components/editorTabPanel'\r\n\r\nexport default ({ props, children }: any) => {\r\n  if (props.data.getLogin) {\r\n    return (\r\n      <main class='section new-post'>\r\n        <TabPanel\r\n          preview={props.data.preview}\r\n          showPreview={props.methods.showPreview}\r\n          showEditor={props.methods.showEditor}\r\n        />\r\n        {children}\r\n      </main>\r\n    )\r\n  } else {\r\n    return <div>You must be logged to perform this action.</div>\r\n  }\r\n}\r\n","import { Vue, Component, Prop } from 'vue-property-decorator'\r\nimport MutationList from '../graphql/Mutations'\r\nimport VueMarkdown from 'vue-markdown'\r\nimport {\r\n  Getter, Mutation\r\n} from 'vuex-class'\r\nimport NewThreadTemplate from '../templates/pages/newThread'\r\n\r\nconst Mutations = new MutationList()\r\n\r\n@Component({\r\n  name: 'newThread',\r\n  components: {\r\n    VueMarkdown\r\n  }\r\n})\r\nexport default class NewThread extends Vue {\r\n  @Prop() public id!: number\r\n  @Getter('getLogin') public getLogin\r\n  @Getter('getAdmin') public getAdmin\r\n  @Mutation('setTitle') public setTitle\r\n  @Mutation('setBack') public setBack\r\n  public title: string = ''\r\n  public postBody: any = ''\r\n  public preview: boolean = false\r\n\r\n  public showPreview () {\r\n    this.preview = false\r\n  }\r\n\r\n  public showEditor () {\r\n    this.preview = true\r\n  }\r\n\r\n  public mutate () {\r\n    if (this.title !== '' && this.postBody !== '') {\r\n      this.$apollo\r\n        .mutate({\r\n          variables: {\r\n            id: this.id,\r\n            title: this.title,\r\n            body: this.postBody\r\n          },\r\n          mutation: Mutations.createThread()\r\n        })\r\n        .then((result) => {\r\n          this.threadSuccess(result)\r\n        })\r\n        .catch((error) => {\r\n          if (error.graphQLErrors) {\r\n            this.threadError(error)\r\n          }\r\n        })\r\n    } else {\r\n      alert(\r\n        `Error, empty fields: ${this.title === '' &&\r\n          `Title can't be blank`}. ${this.postBody === '' &&\r\n          `Post can't be blank`} `\r\n      )\r\n    }\r\n  }\r\n\r\n  public threadSuccess (result: any) {\r\n    alert('Thread created successfully')\r\n    this.$router.push(`/blog/categories/${this.id}/`)\r\n  }\r\n\r\n  public threadError (error: any) {\r\n    alert(error)\r\n  }\r\n\r\n  public mounted () {\r\n    if (this.getAdmin) {\r\n      this.setTitle('New thread')\r\n      this.setBack(true)\r\n    } else {\r\n      alert('Admin place only')\r\n      setTimeout(() => {\r\n        this.$router.push('/blog')\r\n      }, 2000)\r\n    }\r\n  }\r\n\r\n  public render (h: any) {\r\n    if (this.getAdmin) {\r\n      return (\r\n        <NewThreadTemplate\r\n          data={{\r\n            ...this.$props,\r\n            ...this.$data,\r\n            getLogin: this.getLogin\r\n          }}\r\n          methods={{\r\n            showPreview: this.showPreview,\r\n            showEditor: this.showEditor\r\n          }}\r\n        >\r\n          {!this.preview ? (\r\n            <div class='pure-form pure-form-stacked pure-u-1'>\r\n              <fieldset>\r\n                <input\r\n                  class='pure-input-1'\r\n                  id='title'\r\n                  placeholder='Title'\r\n                  type='text'\r\n                  vModel={this.title}\r\n                />\r\n              </fieldset>\r\n              <fieldset class='pure-1 thread-comment-box'>\r\n                <textarea\r\n                  class='textarea'\r\n                  id='postBody'\r\n                  resize='false'\r\n                  vModel={this.postBody}\r\n                />\r\n              </fieldset>\r\n              <button\r\n                class='pure-button -fixed pure-button-primary input'\r\n                onClick={() => this.mutate()}\r\n              >\r\n              create Thread\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <section class='markdown-style -padding'>\r\n              <vue-markdown typographer>\r\n                ## {this.title}\r\n              </vue-markdown>\r\n              <vue-markdown typographer>\r\n                {this.postBody}\r\n              </vue-markdown>\r\n            </section>\r\n          )}\r\n        </NewThreadTemplate>\r\n      )\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n","\r\nexport default ({ props, children }: any) => {\r\n\r\n  return (\r\n    <ul class='tab-panel'>\r\n      <li\r\n        class={`tab ${!props.preview && 'active'}`}\r\n        onClick={() => props.showPreview()}\r\n      >\r\n        <h3>Editor</h3>\r\n      </li>\r\n      <li\r\n        class={`tab ${props.preview && 'active'}`}\r\n        onClick={() => props.showEditor()}\r\n      >\r\n        <h3>Preview</h3>\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\n"],"sourceRoot":""}