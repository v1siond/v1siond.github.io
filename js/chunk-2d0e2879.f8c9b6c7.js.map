{"version":3,"sources":["webpack:///./src/templates/pages/thread.tsx","webpack:///./src/pages/Thread.tsx"],"names":["thread","functional","render","h","_ref","props","class","list","attrs","data","posts","post","getLogin","to","concat","category","id","Query","Queries","Thread_Thread","_Vue","Thread","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","setTitle","title","setBack","objectSpread","$props","returnPost","get","reverse","vue_property_decorator","tslib_es6","lib","vue_class_component_common_default","apollo","query","variables","threadId","skip","error","_error","console","log","fetchPolicy","components","vueMarkdown","vue_markdown_common_default","a","name","String","__webpack_exports__"],"mappings":"2SAGeA,EAAA,CAAfC,YAAA,EAAAC,OAAA,SAAAC,EAAAC,GAAkC,IAAhBC,EAAgBD,EAAhBC,MAChB,OAAAF,EAAA,QAAAG,MACc,WADd,CAAAH,EAAAI,EAAA,MAAAC,MAAA,CAAAD,KAGYF,EAAMI,KAAKC,MAHvBC,MAAA,KAMKN,EAAMI,KAAKG,UAAXT,EAAA,cAAAG,MAES,qBAFTE,MAAA,CAAAK,GAAA,oBAAAC,OAG2BT,EAAMI,KAAKT,OAAOe,SAASC,GAHtD,aAAAF,OAGoET,EAAMI,KAAKT,OAAOgB,GAHtF,iCCJDC,EAAQ,IAAIC,EAAA,KA4BGC,EAArB,SAAAC,GAAA,SAAAC,IAAA,OAAAC,OAAAC,EAAA,KAAAD,CAAAE,KAAAH,GAAAC,OAAAG,EAAA,KAAAH,CAAAE,KAAAF,OAAAI,EAAA,KAAAJ,CAAAD,GAAAM,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,KAAAP,CAAAD,EAAAD,GAAAE,OAAAQ,EAAA,KAAAR,CAAAD,EAAA,EAAAU,IAAA,SAAAC,MAAA,SAUiB7B,GACb,OAAIqB,KAAKxB,QACPwB,KAAKS,SAAST,KAAKxB,OAAOkC,OAC1BV,KAAKW,SAAQ,GACbhC,EAAAH,EAAA,CAAAQ,MAAA,CAAAC,KAAAa,OAAAc,EAAA,KAAAd,CAAA,GAGSE,KAAKa,OAHd,CAIMrC,OAAQwB,KAAKxB,OACbU,MAAOc,KAAKc,WACZ1B,SAAUY,KAAKZ,eAKrB,yBAzBN,CAAAmB,IAAA,aAAAQ,IAAA,WAOI,OAAOf,KAAKxB,OAAOU,MAAM8B,cAP7BnB,EAAA,CAAoCoB,EAAA,MACdC,EAAA,MAAnBpB,OAAAqB,EAAA,KAAArB,CAAO,4CACcoB,EAAA,MAArBpB,OAAAqB,EAAA,KAAArB,CAAS,4CACWoB,EAAA,MAApBpB,OAAAqB,EAAA,KAAArB,CAAS,0CAHSH,EAAMuB,EAAA,MA1B1BE,IAAU,CACTC,OAAQ,CACN7C,OAAQ,CACN8C,MAAO7B,EAAMjB,OACb+C,UAFM,WAGJ,MAAO,CACL/B,GAAIQ,KAAKwB,WAGbC,KAPM,WAQJ,OAAQzB,KAAKwB,UAEfE,MAVM,SAUCC,GACLC,QAAQC,IAAR,sBAAmCF,IAErCG,YAAa,iBAGjBC,WAAY,CACVC,YAAAC,EAAAC,GAEFC,KAAM,SACNtD,MAAO,CACL2C,SAAUY,WAGOzC,GAAA0C,EAAA","file":"js/chunk-2d0e2879.f8c9b6c7.js","sourcesContent":["import Toolbar from '../../components/Toolbar'\r\nimport PostsList from '../components/list'\r\n\r\nexport default ({ props }: any) => {\r\n  return (\r\n    <main class='section'>\r\n      <PostsList\r\n        list={props.data.posts}\r\n        post\r\n      />\r\n      {props.data.getLogin && (\r\n        <routerLink\r\n          class='pure-button -fixed'\r\n          to={`/blog/categories/${props.data.thread.category.id}/threads/${props.data.thread.id}/new-post`}\r\n        >\r\n          New Post\r\n        </routerLink>\r\n      )}\r\n    </main>\r\n  )\r\n}\r\n","import { Vue } from 'vue-property-decorator'\r\nimport Component from 'vue-class-component'\r\nimport Queries from '../graphql/Queries'\r\nimport { Getter, Mutation } from 'vuex-class'\r\nimport vueMarkdown from 'vue-markdown'\r\nimport ThreadTemplate from '../templates/pages/thread'\r\nconst Query = new Queries()\r\n\r\n@Component({\r\n  apollo: {\r\n    thread: {\r\n      query: Query.thread,\r\n      variables () {\r\n        return {\r\n          id: this.threadId\r\n        }\r\n      },\r\n      skip () {\r\n        return !this.threadId\r\n      },\r\n      error (error) {\r\n        console.log(`We've got an error!`, error)\r\n      },\r\n      fetchPolicy: 'network-only'\r\n    }\r\n  },\r\n  components: {\r\n    vueMarkdown\r\n  },\r\n  name: 'thread',\r\n  props: {\r\n    threadId: String\r\n  }\r\n})\r\nexport default class Thread extends Vue {\r\n  @Getter('getLogin') public getLogin: any\r\n  @Mutation('setTitle') public setTitle\r\n  @Mutation('setBack') public setBack\r\n  public thread: any\r\n\r\n  public get returnPost () {\r\n    return this.thread.posts.reverse()\r\n  }\r\n\r\n  public render (h: any) {\r\n    if (this.thread) {\r\n      this.setTitle(this.thread.title)\r\n      this.setBack(true)\r\n      return (\r\n        <ThreadTemplate\r\n          data={{\r\n            ...this.$props,\r\n            thread: this.thread,\r\n            posts: this.returnPost,\r\n            getLogin: this.getLogin\r\n          }}\r\n        />\r\n      )\r\n    } else {\r\n      return `Thread doesn't exist`\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}